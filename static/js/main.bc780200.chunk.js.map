{"version":3,"sources":["Components/Button.js","Components/User.js","Components/Test.js","App.js","serviceWorker.js","index.js"],"names":["cx","classNames","bind","styles","Button","props","buttonClasses","Hidden","disabled","Active","active","className","onClick","children","User","selectUser","result","isEditMode","checkboxClasses","Checkbox","Opaque","type","checked","undefined","value","name","first","last","dob","age","Test","useState","results","setResults","selected","setSelected","setIsEditMode","isAsc","setIsAsc","showTwoYoungest","setShowTwoYoungest","a","fetch","response","json","useEffect","fetchResults","then","res","resultsCopy","sort","b","userA","toUpperCase","userB","comparison","toggleOrder","Date","date","getTime","slice","handleYoungestUsers","filter","length","deleteUsers","map","index","key","login","uuid","selectedCopy","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SAIIA,EAAKC,IAAWC,KAAKC,KACV,SAASC,EAAOC,GAC7B,IAAIC,EAAgBN,EAAG,CACrBI,QAAQ,EACRG,OAAQF,EAAMG,UAAY,EAC1BC,OAAQJ,EAAMK,SAGhB,OACE,4BAAQC,UAAWL,EAAeM,QAASP,EAAMO,SAC9CP,EAAMQ,UCVb,IAAIb,EAAKC,IAAWC,KAAKC,KAEV,SAASW,EAAT,GAAgE,IAAhDC,EAA+C,EAA/CA,WAA+C,IAAnCC,cAAmC,MAA1B,GAA0B,MAAtBC,kBAAsB,SACxEC,EAAkBlB,EAAG,CACvBmB,UAAU,EACVC,QAASH,IAGX,OACE,6BACE,+BACE,2BACEN,UAAWO,EACXG,KAAK,WACLb,UAAWS,EACXK,aAC6BC,IAA3BP,EAAO,iBAAiCA,EAAO,gBAEjDJ,QAASG,EACTS,MAAM,SAEPR,EAAOS,KAAKC,MAXf,IAWuBV,EAAOS,KAAKE,KAXnC,IAW0CX,EAAOY,IAAIC,MCrB5C,SAASC,IAAQ,IAAD,EACCC,mBAAS,IADV,mBACtBC,EADsB,KACbC,EADa,OAEGF,mBAAS,GAFZ,mBAEtBG,EAFsB,KAEZC,EAFY,OAGOJ,oBAAS,GAHhB,mBAGtBd,EAHsB,KAGVmB,EAHU,OAIHL,mBAAS,MAJN,mBAItBM,EAJsB,KAIfC,EAJe,OAKiBP,oBAAS,GAL1B,mBAKtBQ,EALsB,KAKLC,EALK,iDAW7B,4BAAAC,EAAA,sEACyBC,MACrB,iDAFJ,cACQC,EADR,gBAIeA,EAASC,OAJxB,oFAX6B,sBA+D7B,OAzDAC,qBAAU,WACHN,GAPsB,0CAQzBO,GAAeC,MAAK,SAAAC,GAAG,OAAIf,EAAWe,EAAG,cAC1C,CAACT,IAuDF,6BACE,kBAACnC,EAAD,CAAQQ,QAAS,kBA/CrB,WACE,IAAIqC,EAAcjB,EAAQkB,MAAK,SAACT,EAAGU,GACjC,IAAIC,EAAQX,EAAEhB,KAAKC,MAAM2B,cAAgBZ,EAAEhB,KAAKE,KAAK0B,cACjDC,EAAQH,EAAE1B,KAAKC,MAAM2B,cAAgBF,EAAE1B,KAAKE,KAAK0B,cACjDE,EAAa,EAGjB,OAFIH,EAAQE,EAAOC,EAAalB,GAAS,EAAI,EACpCe,EAAQE,IAAOC,EAAalB,EAAQ,GAAK,GAC3CkB,KAETtB,EAAWgB,GACXX,GAAUD,GAqCemB,KAAvB,UACgB,OAAVnB,EAAiB,WAAaA,EAAQ,MAAQ,SAEpD,kBAACjC,EAAD,CAAQQ,QAAS,kBA3BrB,WACE,IAAIqC,EAAW,YAAOjB,GACjBO,IACHN,EACEgB,EACGC,MACC,SAACT,EAAGU,GAAJ,OACE,IAAIM,KAAKN,EAAEvB,IAAI8B,MAAMC,UAAY,IAAIF,KAAKhB,EAAEb,IAAI8B,MAAMC,aAEzDC,MAAM,EAAG,IAEdtB,EAAS,OAEXE,GAAoBD,GAcKsB,IAAuBnD,OAAQ6B,GAAtD,qBAGA,kBAACnC,EAAD,CAAQQ,QAAS,kBAAMwB,GAAenB,IAAaP,OAAQO,GAA3D,QAGA,kBAACb,EAAD,CAAQQ,QAAS,kBAjBrB,WACE,IAAIqC,EAAcjB,EAAQ8B,QAAO,SAAA9C,GAAM,OAAKA,EAAO,mBACnDiB,EAAWgB,GACXd,EAAY,GACRI,GAA0C,IAAvBU,EAAYc,QAAcvB,GAAmB,GAa3CwB,IAAexD,SAAU0B,GAAYjB,GAA5D,UAGCe,EAAQiC,KAAI,SAACjD,EAAQkD,GAAT,OACX,kBAACpD,EAAD,CACEqD,IAAKnD,EAAOoD,MAAMC,KAClBrD,OAAQA,EACRC,WAAYA,EACZiD,MAAOA,EACPnD,WAAY,kBApDpB,SAAoBmD,GAClB,IAAIjB,EAAW,YAAOjB,GAClBsC,EAAerB,EAAYiB,GAAO,gBAClChC,EAAW,EACXA,EAAW,EACfe,EAAYiB,GAAO,iBAAmBjB,EAAYiB,GAAO,gBACzDjC,EAAWgB,GACXd,EAAYmC,GA6CYvD,CAAWmD,UC/ExBK,MAJf,WACE,OAAO,kBAACzC,EAAD,OCOW0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB","file":"static/js/main.bc780200.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"../Styles/Style.css\";\n\nlet cx = classNames.bind(styles);\nexport default function Button(props) {\n  let buttonClasses = cx({\n    Button: true,\n    Hidden: props.disabled <= 0,\n    Active: props.active\n  });\n\n  return (\n    <button className={buttonClasses} onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"../Styles/Style.css\";\n\nlet cx = classNames.bind(styles);\n\nexport default function User({ selectUser, result = [], isEditMode = false }) {\n  let checkboxClasses = cx({\n    Checkbox: true,\n    Opaque: !isEditMode\n  });\n\n  return (\n    <div>\n      <label>\n        <input\n          className={checkboxClasses}\n          type=\"checkbox\"\n          disabled={!isEditMode}\n          checked={\n            result[\"--selected--\"] !== undefined && result[\"--selected--\"]\n          }\n          onClick={selectUser}\n          value=\"test\"\n        />\n        {result.name.first} {result.name.last} {result.dob.age}\n      </label>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"./Button\";\nimport User from \"./User\";\n\nexport default function Test() {\n  const [results, setResults] = useState([]);\n  const [selected, setSelected] = useState(0);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [isAsc, setIsAsc] = useState(null);\n  const [showTwoYoungest, setShowTwoYoungest] = useState(false);\n  useEffect(() => {\n    if (!showTwoYoungest)\n      fetchResults().then(res => setResults(res[\"results\"]));\n  }, [showTwoYoungest]);\n\n  async function fetchResults() {\n    const response = await fetch(\n      \"https://randomuser.me/api/?results=100&nat=gb\"\n    );\n    return await response.json();\n  }\n\n  function toggleOrder() {\n    let resultsCopy = results.sort((a, b) => {\n      let userA = a.name.first.toUpperCase() + a.name.last.toUpperCase();\n      let userB = b.name.first.toUpperCase() + b.name.last.toUpperCase();\n      let comparison = 0;\n      if (userA > userB) comparison = isAsc ? -1 : 1;\n      else if (userA < userB) comparison = isAsc ? 1 : -1;\n      return comparison;\n    });\n    setResults(resultsCopy);\n    setIsAsc(!isAsc);\n  }\n\n  function selectUser(index) {\n    let resultsCopy = [...results];\n    let selectedCopy = resultsCopy[index][\"--selected--\"]\n      ? selected - 1\n      : selected + 1;\n    resultsCopy[index][\"--selected--\"] = !resultsCopy[index][\"--selected--\"];\n    setResults(resultsCopy);\n    setSelected(selectedCopy);\n  }\n\n  function handleYoungestUsers() {\n    let resultsCopy = [...results];\n    if (!showTwoYoungest) {\n      setResults(\n        resultsCopy\n          .sort(\n            (a, b) =>\n              new Date(b.dob.date).getTime() - new Date(a.dob.date).getTime()\n          )\n          .slice(0, 2)\n      );\n      setIsAsc(null);\n    }\n    setShowTwoYoungest(!showTwoYoungest);\n  }\n\n  function deleteUsers() {\n    let resultsCopy = results.filter(result => !result[\"--selected--\"]);\n    setResults(resultsCopy);\n    setSelected(0);\n    if (showTwoYoungest && resultsCopy.length === 0) setShowTwoYoungest(false);\n  }\n  return (\n    <div>\n      <Button onClick={() => toggleOrder()}>\n        {`${isAsc === null ? \"no Order\" : isAsc ? \"ASC\" : \"DESC\"}`}\n      </Button>\n      <Button onClick={() => handleYoungestUsers()} active={showTwoYoungest}>\n        Show Two youngest\n      </Button>\n      <Button onClick={() => setIsEditMode(!isEditMode)} active={isEditMode}>\n        Edit\n      </Button>\n      <Button onClick={() => deleteUsers()} disabled={selected && isEditMode}>\n        Delete\n      </Button>\n      {results.map((result, index) => (\n        <User\n          key={result.login.uuid}\n          result={result}\n          isEditMode={isEditMode}\n          index={index}\n          selectUser={() => selectUser(index)}\n        />\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n// import \"./App.css\";\nimport Test from \"./Components/Test\";\n\nfunction App() {\n  return <Test />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}